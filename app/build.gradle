apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 31
    defaultConfig {
        applicationId "com.github.zawadz88.screenshotcapturingsample"
        minSdkVersion 19
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    adbOptions {
        installOptions '-g', '-r'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    implementation 'com.google.android.material:material:1.4.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

def reportsDirectory = "$buildDir/reports/androidTests/connected"

def embedScreenshotsTask = task('embedScreenshots', group: 'reporting') {
    doFirst {
        def failureScreenshotsDirectory = new File(reportsDirectory, 'screenshots/failures')

        if (!failureScreenshotsDirectory.exists()) {
            println 'Could not find screenshot failures. Skipping...'
            return
        }

        failureScreenshotsDirectory.eachFile { failedTestClassDirectory ->
            def failedTestClassName = failedTestClassDirectory.name

            failedTestClassDirectory.eachFile { failedTestFile ->
                def failedTestName = failedTestFile.name
                def failedTestNameWithoutExtension = failedTestName.take(failedTestName.lastIndexOf('.'))
                def failedTestClassJunitReportFile = new File(reportsDirectory, "${failedTestClassName}.html")

                if (!failedTestClassJunitReportFile.exists()) {
                    println "Could not find JUnit report file for test class '${failedTestClassJunitReportFile}'"
                    return
                }

                def failedTestJunitReportContent = failedTestClassJunitReportFile.text

                def patternToFind = "<h3 class=\"failures\">${failedTestNameWithoutExtension}</h3>"
                def patternToReplace = "${patternToFind} <img src=\"screenshots/failures/${failedTestClassName}/${failedTestName}\" width =\"360\" />"

                failedTestJunitReportContent = failedTestJunitReportContent.replaceAll(patternToFind, patternToReplace)

                failedTestClassJunitReportFile.write(failedTestJunitReportContent)
            }
        }
    }
}

def clearScreenshotsTask = task('clearScreenshots', type: Exec) {
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'rm', '-r', '/sdcard/Pictures/my_app_folder'
    finalizedBy {
        embedScreenshotsTask
    }
}

def createScreenshotDirectoryTask = task('createScreenshotDirectory', type: Exec, group: 'reporting') {
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'mkdir', '-p', '/sdcard/Pictures/my_app_folder'
}

def fetchScreenshotsTask = task('fetchScreenshots', type: Exec, group: 'reporting') {
    executable "${android.getAdbExe().toString()}"
    args 'pull', '/sdcard/Pictures/my_app_folder/.', reportsDirectory
    finalizedBy {
        clearScreenshotsTask
    }

    dependsOn {
        createScreenshotDirectoryTask
    }

    doFirst {
        new File(reportsDirectory).mkdirs()
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'connectedDebugAndroidTest') {
        task.finalizedBy {
            fetchScreenshotsTask
        }
    }
}
